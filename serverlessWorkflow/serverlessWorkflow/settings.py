"""
Django settings for serverlessWorkflow project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import environ

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env_file = os.path.join(BASE_DIR, ".env")

os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = os.path.join(os.path.dirname(BASE_DIR), 'credentials.json')

if not os.path.isfile('.env'):

    # Import the Secret Manager client library.
    from google.cloud import secretmanager
    from google.auth import default

    # Create the Secret Manager client.
    client = secretmanager.SecretManagerServiceClient()

    # get project_id
    _, project_id = default()

    # get secret_id
    secret_id = os.environ.get('SECRET_NAME')

    # get version_id
    version_id = 'latest'

    # Build the resource name of the secret version.
    name = f"projects/{project_id}/secrets/{secret_id}/versions/{version_id}"

    # Access the secret version.
    response = client.access_secret_version(request={"name": name})

    # decode secret
    payload = response.payload.data.decode("UTF-8")

    # write payload
    with open(env_file, "w") as f:
        f.write(payload)

env = environ.Env()
env.read_env(env_file)

SECRET_KEY = env('SECRET_KEY')
DEBUG = env('DEBUG', cast=bool, default=False)

ALLOWED_HOSTS = ['*']


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    
    'drf_yasg',
    'rest_framework',
    'rest_framework.authtoken',

    # apps
    'task_services',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]

ROOT_URLCONF = 'serverlessWorkflow.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'serverlessWorkflow.wsgi.application'

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

AUTH_USER_MODEL = 'task_services.User'


FIXTURE_DIRS = ("services/fixtures/",)

STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static')
STATIC_URL = '/static/'

EMAIL_CONFIG = env.email_url('EMAIL_URL')

ADMINS = (
    ('Priyanshu Bhatnagar', 'priyanshu@advancedware.in'),
)

MANAGERS = (
    ('Rohan Baddi', 'rohan@advancedware.in'),
)

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#################################################################################
# Rest Framework
#################################################################################
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_FILTER_BACKENDS': ['rest_framework.filters.OrderingFilter'],
    'DEFAULT_AUTHENTICATION_CLASSES':('rest_framework.authentication.TokenAuthentication',),
    'PAGE_SIZE': 100,
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    )
}

DATABASES = {
    'default': env.db()
}

DATABASES["default"]["CONN_MAX_AGE"] = 60

###########################################
# Cloud Tasks
###########################################

SERVERLESS_WORKFLOW_URL   = os.environ.get('SERVERLESS_WORKFLOW_URL',env('SERVERLESS_WORKFLOW_URL'))
###########################################
# Storages
###########################################

GS_BUCKET_NAME          = env("GS_BUCKET_NAME")

DEFAULT_FILE_STORAGE    = "storages.backends.gcloud.GoogleCloudStorage"
STATICFILES_STORAGE     = "storages.backends.gcloud.GoogleCloudStorage"

GS_DEFAULT_ACL          = "publicRead"
